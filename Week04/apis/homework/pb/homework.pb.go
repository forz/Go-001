// Code generated by protoc-gen-go. DO NOT EDIT.
// source: homework.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetUserNameRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserNameRequest) Reset()         { *m = GetUserNameRequest{} }
func (m *GetUserNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserNameRequest) ProtoMessage()    {}
func (*GetUserNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_homework_bd0a5262b8daa634, []int{0}
}
func (m *GetUserNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserNameRequest.Unmarshal(m, b)
}
func (m *GetUserNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserNameRequest.Marshal(b, m, deterministic)
}
func (dst *GetUserNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserNameRequest.Merge(dst, src)
}
func (m *GetUserNameRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserNameRequest.Size(m)
}
func (m *GetUserNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserNameRequest proto.InternalMessageInfo

func (m *GetUserNameRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetUserNameReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserNameReply) Reset()         { *m = GetUserNameReply{} }
func (m *GetUserNameReply) String() string { return proto.CompactTextString(m) }
func (*GetUserNameReply) ProtoMessage()    {}
func (*GetUserNameReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_homework_bd0a5262b8daa634, []int{1}
}
func (m *GetUserNameReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserNameReply.Unmarshal(m, b)
}
func (m *GetUserNameReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserNameReply.Marshal(b, m, deterministic)
}
func (dst *GetUserNameReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserNameReply.Merge(dst, src)
}
func (m *GetUserNameReply) XXX_Size() int {
	return xxx_messageInfo_GetUserNameReply.Size(m)
}
func (m *GetUserNameReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserNameReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserNameReply proto.InternalMessageInfo

func (m *GetUserNameReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GetUserNameRequest)(nil), "pb.GetUserNameRequest")
	proto.RegisterType((*GetUserNameReply)(nil), "pb.GetUserNameReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HomeworkClient is the client API for Homework service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HomeworkClient interface {
	GetUserName(ctx context.Context, in *GetUserNameRequest, opts ...grpc.CallOption) (*GetUserNameReply, error)
}

type homeworkClient struct {
	cc *grpc.ClientConn
}

func NewHomeworkClient(cc *grpc.ClientConn) HomeworkClient {
	return &homeworkClient{cc}
}

func (c *homeworkClient) GetUserName(ctx context.Context, in *GetUserNameRequest, opts ...grpc.CallOption) (*GetUserNameReply, error) {
	out := new(GetUserNameReply)
	err := c.cc.Invoke(ctx, "/pb.Homework/GetUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeworkServer is the server API for Homework service.
type HomeworkServer interface {
	GetUserName(context.Context, *GetUserNameRequest) (*GetUserNameReply, error)
}

func RegisterHomeworkServer(s *grpc.Server, srv HomeworkServer) {
	s.RegisterService(&_Homework_serviceDesc, srv)
}

func _Homework_GetUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServer).GetUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Homework/GetUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServer).GetUserName(ctx, req.(*GetUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Homework_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Homework",
	HandlerType: (*HomeworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserName",
			Handler:    _Homework_GetUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "homework.proto",
}

func init() { proto.RegisterFile("homework.proto", fileDescriptor_homework_bd0a5262b8daa634) }

var fileDescriptor_homework_bd0a5262b8daa634 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xc8, 0xcf, 0x4d,
	0x2d, 0xcf, 0x2f, 0xca, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0x92,
	0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f,
	0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xa8, 0x50, 0x52, 0xe1, 0x12, 0x72, 0x4f, 0x2d, 0x09,
	0x2d, 0x4e, 0x2d, 0xf2, 0x4b, 0xcc, 0x4d, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2,
	0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x51, 0x52,
	0xe3, 0x12, 0x40, 0x51, 0x55, 0x90, 0x53, 0x29, 0x24, 0xc4, 0xc5, 0x92, 0x97, 0x98, 0x9b, 0x0a,
	0x55, 0x05, 0x66, 0x1b, 0x25, 0x70, 0x71, 0x78, 0x40, 0x5d, 0x20, 0x14, 0xc2, 0xc5, 0x8d, 0xa4,
	0x47, 0x48, 0x4c, 0xaf, 0x20, 0x49, 0x0f, 0xd3, 0x2a, 0x29, 0x11, 0x0c, 0xf1, 0x82, 0x9c, 0x4a,
	0x25, 0xf1, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0x09, 0x2a, 0xf1, 0xe8, 0x23, 0x49, 0x59, 0x31, 0x6a,
	0x25, 0xb1, 0x81, 0x9d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x17, 0xf5, 0xc4, 0xea,
	0x00, 0x00, 0x00,
}
